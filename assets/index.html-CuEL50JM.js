import{_ as e,c as l,a as i,o as t}from"./app-D2B0C_7K.js";const n={};function s(c,a){return t(),l("div",null,a[0]||(a[0]=[i('<h2 id="什么是jvm" tabindex="-1"><a class="header-anchor" href="#什么是jvm"><span>什么是JVM？</span></a></h2><p>Java Virtual Machine，简称JVM，是Java程序运行的虚拟机，它屏蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行</p><p>Java源代码的执行分为一下三个步骤：</p><ol><li>编写Java源代码文件</li><li>使用Java编译器（javac命令）将源代码编译成Java字节码文件</li><li>使用Java虚拟机加载并运行Java字节码文件，此时会启动一个新的进程</li></ol><h2 id="jvm的功能" tabindex="-1"><a class="header-anchor" href="#jvm的功能"><span>JVM的功能</span></a></h2><h3 id="解释和运行" tabindex="-1"><a class="header-anchor" href="#解释和运行"><span>解释和运行</span></a></h3><p>对字节码文件中的指令，实时的解释成机器码，让计算机执行</p><p>字节码文件中包含了字节码指令，计算器无法直接执行，Java虚拟机会将字节码文件中的字节码指令实时地解释成机器码，机器码是计算机可以运行的指令</p><h3 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h3><ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制，自动回收不再使用的对象</li></ul><p>Java虚拟机会帮助程序员为对象分配内存，同时将不用的对象使用垃圾回收器回收掉，这是对比C和C++这些语言的一个优势。在C/C++语言中，对象的回收需要程序员手动去编写代码完成，如果遗漏了这段删除对象的代码，这个对象就会永远占用内存空间，不会再回收。所以JVM的这个功能降低了程序员编写代码的难度</p><h3 id="即时编译" tabindex="-1"><a class="header-anchor" href="#即时编译"><span>即时编译</span></a></h3><p><code>即时编译</code>是指对热点代码进行优化，提升执行效率</p><p>Java语言如果不做任何优化，性能还不如C和C++的，因为Java需要将字节码指令通过JVM解释为机器码，然后才能执行，而C和C++是直接编译成机器码，所以Java的性能不如C和C++</p><p>但是这样让JVM来解释也有一个好处，就是支持了跨平台</p><p>为了优化Java代码运行的性能，JVM引入了即时编译器</p><p>比如说现在有一段字节码的指令，然后JVM发现这段字节码指令在很短的时间内被多次调用，那么JVM就会主动去解释并优化这段字节码指令，并且<code>保存到内存中</code>，这样第二次去调用的时候速度就会加快，省略了一次解释的步骤</p><h2 id="jvm的组成" tabindex="-1"><a class="header-anchor" href="#jvm的组成"><span>JVM的组成</span></a></h2><ul><li>类加载器：核心组件类加载器，负责将字节码文件中的内容加载到内存中</li><li>运行时数据区域：JVM管理的内存，创建出来的对象、类的信息等等内容都会放在这块区域中</li><li>执行引擎：包含了即时编译器、解释器、垃圾回收器，执行引擎使用解释器将字节码指令解释成机器码，使用即时编译器优化性能，使用垃圾回收器回收不再使用的对象</li><li>本地接口：调用本地使用C/C++编译好的方法，本地方法在Java中声明时，都会带上native关键字</li></ul>',19)]))}const r=e(n,[["render",s],["__file","index.html.vue"]]),h=JSON.parse(`{"path":"/jvm/y9pke4ug/","title":"JVM基本认知","lang":"zh-CN","frontmatter":{"title":"JVM基本认知","createTime":"2024/09/07 14:41:33","permalink":"/jvm/y9pke4ug/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"什么是JVM？","slug":"什么是jvm","link":"#什么是jvm","children":[]},{"level":2,"title":"JVM的功能","slug":"jvm的功能","link":"#jvm的功能","children":[{"level":3,"title":"解释和运行","slug":"解释和运行","link":"#解释和运行","children":[]},{"level":3,"title":"内存管理","slug":"内存管理","link":"#内存管理","children":[]},{"level":3,"title":"即时编译","slug":"即时编译","link":"#即时编译","children":[]}]},{"level":2,"title":"JVM的组成","slug":"jvm的组成","link":"#jvm的组成","children":[]}],"readingTime":{"minutes":2.79,"words":836},"git":{},"filePathRelative":"notes/JVM/基础篇/JVM基本认知.md"}`);export{r as comp,h as data};
