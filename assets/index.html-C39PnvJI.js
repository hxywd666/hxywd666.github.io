import{_ as i,r as e,c as d,a,b as n,o as l}from"./app-D2B0C_7K.js";const p={};function h(r,s){const t=e("RepoCard");return l(),d("div",null,[s[0]||(s[0]=a(`<h2 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言"><span>0. 前言</span></a></h2><p>在正式进行开发之前，我们需要学习一些和QQ机器人开发相关的前置知识。因为Lagrange.oneBot框架对于QQ消息的收发有一些必须遵守的规范，所以说请不要直接跳过这个前置知识的章节，相信你看完一定能有所收获！</p><h2 id="_1-消息" tabindex="-1"><a class="header-anchor" href="#_1-消息"><span>1. 消息</span></a></h2><h3 id="cq码" tabindex="-1"><a class="header-anchor" href="#cq码"><span>CQ码</span></a></h3><p>有一个前置知识点你必须了解，就是QQ在处理消息的时候会用到一个叫做<strong>CQ码</strong>的东西。如果你对这个东西并不了解，这里来举一个很简单的例子。比如说，我现在要用框架的API发送一张图片，这个图片的路径为&quot;https://baidu.com/img1&quot;，那么对应的CQ码就是：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>[CQ:image,file=https://baidu.com/img1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一切在QQ中的消息都是可以用CQ码来表示的，包括各种文字，图片，音频等多媒体内容</p><p>结合我们这个整合TypeScript的框架，如果你要给某个人私发一张图片，那么对应的代码就是：</p><div class="language-typescript line-numbers-mode" data-ext="typescript" data-title="typescript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sendPrivateMsg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1193466151</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[CQ:image,file=https://baidu.com/img1]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是，在开发的时候我不建议你直接写CQ码，而是应该写成CQ码的JSON对象格式</p><h3 id="cq码的json表示" tabindex="-1"><a class="header-anchor" href="#cq码的json表示"><span>CQ码的JSON表示</span></a></h3><p>还是拿上面的例子来说，现在我还是要私发一张图片，但是我不用CQ码，而是改写成CQ码的JSON对象写法，那么对应的代码应该是：</p><div class="language-typescript line-numbers-mode" data-ext="typescript" data-title="typescript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sendPrivateMsg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1193466151</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	{</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    	&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">type</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">image</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    	&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">data</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        	&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">123.jpg</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>type</code> 字段的类型为字符串，对应 CQ 码中的「功能名」，也就是指定了消息的类型；<code>data</code> 字段的类型为对象，对应 CQ 码的「参数」，此字段可为 null，也就是执行了消息的具体内容</p><p>虽然JSON对象基本上是用来表示多媒体内容的，但是它也可以表示纯文本，比如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">data</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">text</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">这是一段纯文本</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在将上面的消息段转成 CQ 码时，将会直接变成纯文本字符串，而不是真的转成 CQ 码</p><h3 id="消息段数组" tabindex="-1"><a class="header-anchor" href="#消息段数组"><span>消息段数组</span></a></h3><p>如果说，要发送的消息成分复杂，消息类型有多种，那么就可以用到消息段数组的格式，其实就是上面多个JSON对象组成的JSON对象数组。举一个很常见的应用例子，现在我要发送一句带有emoji表情的消息：</p><p><strong>我学会开发QQ机器人了，好开心呀</strong>😆</p><p>那么对应的消息段数组就是：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">data</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">            &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">text</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">我学会开发QQ机器人了，好开心呀</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">emoji</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">data</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">            &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">id</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">128518</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候还是用JSON对象数组表示更加清晰，直接用CQ码表示效果如下：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>我学会开发QQ机器人了，好开心呀[CQ:emoji,id=128518]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>基于这个规则，你就可以排列组合出各种各样的消息了！</p><p>消息的类型在QQ中非常的多，除了音频图片这种常规消息之外，还有一些特殊的QQ独有的消息，比如说&quot;戳一戳&quot;、&quot;匿名消息&quot;、&quot;窗口抖动&quot;等等，都是可以通过CQ码或者JSON对象来表示的。CQ码的对照文档可以参照本站的文档，或者你也可以看一个比较权威的文档👉<a href="https://docs.go-cqhttp.org/cqcode/#qq-%E8%A1%A8%E6%83%85" target="_blank" rel="noopener noreferrer">CQ码对照文档</a></p><h2 id="_2-事件" tabindex="-1"><a class="header-anchor" href="#_2-事件"><span>2. 事件</span></a></h2><h3 id="消息事件" tabindex="-1"><a class="header-anchor" href="#消息事件"><span>消息事件</span></a></h3><ul><li>私聊消息</li></ul><p>上面我们提到，消息内容都是由JSON对象来标识的，而消息内容只是整个消息JSON对象中的一个部分，每条消息还有一些其它的信息，对应的表格如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>可能的值</th><th>说明</th></tr></thead><tbody><tr><td><code>time</code></td><td>number (int64)</td><td>-</td><td>事件发生的时间戳</td></tr><tr><td><code>self_id</code></td><td>number (int64)</td><td>-</td><td>收到事件的机器人 QQ 号</td></tr><tr><td><code>post_type</code></td><td>string</td><td><code>message</code></td><td>上报类型</td></tr><tr><td><code>message_type</code></td><td>string</td><td><code>private</code></td><td>消息类型</td></tr><tr><td><code>sub_type</code></td><td>string</td><td><code>friend</code>、<code>group</code>、<code>other</code></td><td>消息子类型，如果是好友则是 <code>friend</code>，如果是群临时会话则是 <code>group</code></td></tr><tr><td><code>message_id</code></td><td>number (int32)</td><td>-</td><td>消息 ID</td></tr><tr><td><code>user_id</code></td><td>number (int64)</td><td>-</td><td>发送者 QQ 号</td></tr><tr><td><code>message</code></td><td>message</td><td>-</td><td>消息内容</td></tr><tr><td><code>raw_message</code></td><td>string</td><td>-</td><td>原始消息内容</td></tr><tr><td><code>font</code></td><td>number (int32)</td><td>-</td><td>字体</td></tr><tr><td><code>sender</code></td><td>object</td><td>-</td><td>发送人信息</td></tr></tbody></table><p>其中 <code>sender</code> 字段的内容如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>user_id</code></td><td>number (int64)</td><td>发送者 QQ 号</td></tr><tr><td><code>nickname</code></td><td>string</td><td>昵称</td></tr><tr><td><code>sex</code></td><td>string</td><td>性别，<code>male</code> 或 <code>female</code> 或 <code>unknown</code></td></tr><tr><td><code>age</code></td><td>number (int32)</td><td>年龄</td></tr></tbody></table><p>需要注意的是，<code>sender</code> 中的各字段是尽最大努力提供的，也就是说，不保证每个字段都一定存在，也不保证存在的字段都是完全正确的（缓存可能过期）。</p><ul><li>群消息</li></ul><p>群消息的消息字段内容如下</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>可能的值</th><th>说明</th></tr></thead><tbody><tr><td><code>time</code></td><td>number (int64)</td><td>-</td><td>事件发生的时间戳</td></tr><tr><td><code>self_id</code></td><td>number (int64)</td><td>-</td><td>收到事件的机器人 QQ 号</td></tr><tr><td><code>post_type</code></td><td>string</td><td><code>message</code></td><td>上报类型</td></tr><tr><td><code>message_type</code></td><td>string</td><td><code>group</code></td><td>消息类型</td></tr><tr><td><code>sub_type</code></td><td>string</td><td><code>normal</code>、<code>anonymous</code>、<code>notice</code></td><td>消息子类型，正常消息是 <code>normal</code>，匿名消息是 <code>anonymous</code>，系统提示（如「管理员已禁止群内匿名聊天」）是 <code>notice</code></td></tr><tr><td><code>message_id</code></td><td>number (int32)</td><td>-</td><td>消息 ID</td></tr><tr><td><code>group_id</code></td><td>number (int64)</td><td>-</td><td>群号</td></tr><tr><td><code>user_id</code></td><td>number (int64)</td><td>-</td><td>发送者 QQ 号</td></tr><tr><td><code>anonymous</code></td><td>object</td><td>-</td><td>匿名信息，如果不是匿名消息则为 null</td></tr><tr><td><code>message</code></td><td>message</td><td>-</td><td>消息内容</td></tr><tr><td><code>raw_message</code></td><td>string</td><td>-</td><td>原始消息内容</td></tr><tr><td><code>font</code></td><td>number (int32)</td><td>-</td><td>字体</td></tr><tr><td><code>sender</code></td><td>object</td><td>-</td><td>发送人信息</td></tr></tbody></table><p>其中 <code>anonymous</code> 字段的内容如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>number (int64)</td><td>匿名用户 ID</td></tr><tr><td><code>name</code></td><td>string</td><td>匿名用户名称</td></tr><tr><td><code>flag</code></td><td>string</td><td>匿名用户 flag，在调用禁言 API 时需要传入</td></tr></tbody></table><p><code>sender</code> 字段的内容如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>user_id</code></td><td>number (int64)</td><td>发送者 QQ 号</td></tr><tr><td><code>nickname</code></td><td>string</td><td>昵称</td></tr><tr><td><code>card</code></td><td>string</td><td>群名片／备注</td></tr><tr><td><code>sex</code></td><td>string</td><td>性别，<code>male</code> 或 <code>female</code> 或 <code>unknown</code></td></tr><tr><td><code>age</code></td><td>number (int32)</td><td>年龄</td></tr><tr><td><code>area</code></td><td>string</td><td>地区</td></tr><tr><td><code>level</code></td><td>string</td><td>成员等级</td></tr><tr><td><code>role</code></td><td>string</td><td>角色，<code>owner</code> 或 <code>admin</code> 或 <code>member</code></td></tr><tr><td><code>title</code></td><td>string</td><td>专属头衔</td></tr></tbody></table><p>需要注意的是，<code>sender</code> 中的各字段是尽最大努力提供的，也就是说，不保证每个字段都一定存在，也不保证存在的字段都是完全正确的（缓存可能过期）。尤其对于匿名消息，此字段不具有参考价值。</p><h3 id="通知事件" tabindex="-1"><a class="header-anchor" href="#通知事件"><span>通知事件</span></a></h3><p>这部分内容较多，本教程就不全部展示了，请移步官方文档👉<a href="https://github.com/botuniverse/onebot-11/blob/master/event/notice.md" target="_blank" rel="noopener noreferrer">通知事件官方文档</a>👈</p><h3 id="请求事件" tabindex="-1"><a class="header-anchor" href="#请求事件"><span>请求事件</span></a></h3><ul><li>添加好友请求</li></ul><p>添加好友请求的请求数据如下表：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>可能的值</th><th>说明</th></tr></thead><tbody><tr><td><code>time</code></td><td>number (int64)</td><td>-</td><td>事件发生的时间戳</td></tr><tr><td><code>self_id</code></td><td>number (int64)</td><td>-</td><td>收到事件的机器人 QQ 号</td></tr><tr><td><code>post_type</code></td><td>string</td><td><code>request</code></td><td>上报类型</td></tr><tr><td><code>request_type</code></td><td>string</td><td><code>friend</code></td><td>请求类型</td></tr><tr><td><code>user_id</code></td><td>number (int64)</td><td>-</td><td>发送请求的 QQ 号</td></tr><tr><td><code>comment</code></td><td>string</td><td>-</td><td>验证信息</td></tr><tr><td><code>flag</code></td><td>string</td><td>-</td><td>请求 flag，在调用处理请求的 API 时需要传入</td></tr></tbody></table><ul><li>加群请求/邀请别人入群</li></ul><p>对应的请求数据如下表：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>可能的值</th><th>说明</th></tr></thead><tbody><tr><td><code>time</code></td><td>number (int64)</td><td>-</td><td>事件发生的时间戳</td></tr><tr><td><code>self_id</code></td><td>number (int64)</td><td>-</td><td>收到事件的机器人 QQ 号</td></tr><tr><td><code>post_type</code></td><td>string</td><td><code>request</code></td><td>上报类型</td></tr><tr><td><code>request_type</code></td><td>string</td><td><code>group</code></td><td>请求类型</td></tr><tr><td><code>sub_type</code></td><td>string</td><td><code>add</code>、<code>invite</code></td><td>请求子类型，分别表示加群请求、邀请登录号入群</td></tr><tr><td><code>group_id</code></td><td>number (int64)</td><td>-</td><td>群号</td></tr><tr><td><code>user_id</code></td><td>number (int64)</td><td>-</td><td>发送请求的 QQ 号</td></tr><tr><td><code>comment</code></td><td>string</td><td>-</td><td>验证信息</td></tr><tr><td><code>flag</code></td><td>string</td><td>-</td><td>请求 flag，在调用处理请求的 API 时需要传入</td></tr></tbody></table><h2 id="_3-通信" tabindex="-1"><a class="header-anchor" href="#_3-通信"><span>3. 通信</span></a></h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h3><p>通信这个部分，在官方文档的教程中介绍了所有的通信方式，但是在本教程中只会介绍HTTP，也就是发送HTTP请求的方式，其它方式不做介绍。整合TypeScript的框架本身就是用反向WebSocket通信实现的，一些常用的API都已经封装成开箱即用的方法了，开发的时候会用对应的方法即可</p><p>如果你想了解更多通信相关的知识，可以移步这个文档👉<a href="https://github.com/botuniverse/onebot-11/blob/master/communication/README.md" target="_blank" rel="noopener noreferrer">通信知识点教程文档</a>👈</p><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span>请求</span></a></h3><p>之前在&quot;准备工作&quot;章节的时候我们给服务器已经配置了发送HTTP请求的端口号<code>8081</code>，IP地址就是本机IP<code>127.0.0.1</code></p><p>那么，如果我们要向服务器发送一个请求，比方说现在我们要向某个QQ号私发一条消息，你就可以在浏览器中访问👇</p><p><code>http://127.0.0.1:8081/send_private_msg?user_id=1000010000&amp;message=hello</code></p><p>这就是通过URL路径传参，其实现的功能就是向QQ号为1000010000的用户发送一条消息&quot;hello&quot;</p><p>当然，你也可以用JSON对象传参：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>POST /send_private_msg HTTP/1.1</span></span>
<span class="line"><span>Host: 127.0.0.1:5700</span></span>
<span class="line"><span>Content-Type: application/json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;user_id&quot;: 1000010000,</span></span>
<span class="line"><span>    &quot;message&quot;: &quot;hello&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里的<code>send_private_msg</code>就是OneBot提供的标准API，其对应的功能就是私发消息</p><p>知道了私发消息的HTTP请求规则，在使用TypeScript开发的时候，就可以用axios来发送请求了，代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="typescript" data-title="typescript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">axios</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">post</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http://127.0.0.1:8081/send_private_msg</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    user_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000010000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    headers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Content-Type</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">application/json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，只是私发消息的话其实不需要这么麻烦，框架已经提供了对应封装好的方法(但是是用反向WebSocket实现的)，也就是之前示例一直在用的<code>c.sendPrivateMsg</code>方法。实现原理虽然不同，但是殊途同归，结果都是一样的</p><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span>响应</span></a></h3><p>收到 API 请求并处理后，OneBot 会返回一个 HTTP 响应，根据具体情况不同，HTTP 状态码不同：</p><ul><li>如果 access token 未提供，状态码为 401(配置的时候配置了无需token，所以这里不用管)</li><li>如果 access token 不符合，状态码为 403</li><li>如果 POST 请求的 Content-Type 不支持，状态码为 406</li><li>如果 POST 请求的正文格式不正确，状态码为 400</li><li>如果 API 不存在，状态码为 404</li><li>剩下的所有情况，无论操作实际成功与否，状态码都是 200</li></ul><p>状态码为 200 时，响应内容为 JSON 格式，基本结构如下：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;status&quot;: &quot;ok&quot;,</span></span>
<span class="line"><span>    &quot;retcode&quot;: 0,</span></span>
<span class="line"><span>    &quot;data&quot;: {</span></span>
<span class="line"><span>        &quot;id&quot;: 123456,</span></span>
<span class="line"><span>        &quot;nickname&quot;: &quot;滑稽&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>status</code> 字段表示请求的状态：</p><ul><li><code>ok</code> 表示操作成功，同时 <code>retcode</code> （返回码）会等于 0</li><li><code>async</code> 表示请求已提交异步处理，此时 <code>retcode</code> 为 1，具体成功或失败将无法获知</li><li><code>failed</code> 表示操作失败，此时 <code>retcode</code> 既不是 0 也不是 1，具体错误信息应参考 OneBot 实现的日志</li></ul><p><code>data</code> 字段为 API 返回数据的内容，对于踢人、禁言等不需要返回数据的操作，这里为 null，对于获取群成员信息这类操作，这里为所获取的数据的对象，具体的数据内容将会在相应的 API 描述中给出</p><p>对于OneBot提供的标准API的详细文档，内容非常多这里不展示，请移步官方文档👇</p>`,75)),n(t,{repo:"botuniverse/onebot-11"})])}const o=i(p,[["render",h],["__file","index.html.vue"]]),c=JSON.parse(`{"path":"/qqbot/xsmzszji/","title":"前置知识","lang":"zh-CN","frontmatter":{"title":"前置知识","createTime":"2024/09/05 14:03:06","permalink":"/qqbot/xsmzszji/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"0. 前言","slug":"_0-前言","link":"#_0-前言","children":[]},{"level":2,"title":"1. 消息","slug":"_1-消息","link":"#_1-消息","children":[{"level":3,"title":"CQ码","slug":"cq码","link":"#cq码","children":[]},{"level":3,"title":"CQ码的JSON表示","slug":"cq码的json表示","link":"#cq码的json表示","children":[]},{"level":3,"title":"消息段数组","slug":"消息段数组","link":"#消息段数组","children":[]}]},{"level":2,"title":"2. 事件","slug":"_2-事件","link":"#_2-事件","children":[{"level":3,"title":"消息事件","slug":"消息事件","link":"#消息事件","children":[]},{"level":3,"title":"通知事件","slug":"通知事件","link":"#通知事件","children":[]},{"level":3,"title":"请求事件","slug":"请求事件","link":"#请求事件","children":[]}]},{"level":2,"title":"3. 通信","slug":"_3-通信","link":"#_3-通信","children":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"请求","slug":"请求","link":"#请求","children":[]},{"level":3,"title":"响应","slug":"响应","link":"#响应","children":[]}]}],"readingTime":{"minutes":8.85,"words":2654},"git":{},"filePathRelative":"notes/qqbot/开发教程/2.前置知识.md"}`);export{o as comp,c as data};
